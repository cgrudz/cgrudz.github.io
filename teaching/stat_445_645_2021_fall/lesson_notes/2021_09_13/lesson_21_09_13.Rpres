<style>
.section .reveal .state-background {
   background: #ffffff;
}
.section .reveal h1,
.section .reveal h2,
.section .reveal p {
   color: black;
   margin-top: 50px;
   text-align: center;
}
</style>


Writing functions in R
========================================================
autosize: true
incremental: true
width: 1920
height: 1080

<h2 style="text-align:left"> Instructions:</h2>
<p style='text-align:left'>Use the left and right arrow keys to navigate the presentation forward and backward respectively.  You can also use the arrows at the bottom right of the screen to navigate with a mouse.<br></p>

<blockquote>
FAIR USE ACT DISCLAIMER:</br>
This site is for educational purposes only.  This website may contain copyrighted material, the use of which has not been specifically authorized by the copyright holders. The material is made available on this website as a way to advance teaching, and copyright-protected materials are used to the extent necessary to make this class function in a distance learning environment.  The Fair Use Copyright Disclaimer is under section 107 of the Copyright Act of 1976, allowance is made for “fair use” for purposes such as criticism, comment, news reporting, teaching, scholarship, education and research.
</blockquote>


========================================================

<h2>Outline</h2>

<ul>
  <li>The following topics will be covered in this lecture:</li>
  <ul>
    <li>What are functions</li>
		<li>How to write functions</li>
		<li>Combining functions</li>
		<li>Defensive programming practices</li>
		<li>Good programming habits</li>
  </ul>
</ul>


========================================================
## An introduction to functions

* If we only had one data set to analyze, it would probably be faster to load the file into a spreadsheet and use that to plot simple statistics. 

* However, the gapminder data is updated periodically, and we may want to pull in that new information later and re-run our analysis again. 

* We may also obtain similar data from a different source in the future.

* In this lesson, we'll learn how to write a function so that we can repeat several operations with a single command.

========================================================
## What is a function?

<ul>
  <li>Functions gather a sequence of operations into a whole, preserving it for ongoing use.</li>
  <li>Functions provide:</li>
  <ol>
    <li>a name we can remember and invoke it by;</li>
    <li>relief from the need to remember the individual operations;</li>
    <li>a defined set of inputs and expected outputs;</li>
    <li>rich connections to the larger programming environment; and</li>
    <li>a more maintainable use of our code, when we can re-use and re-apply the same methods without the clutter and possible bugs of re-writting the
        the same method every time.</li>
  </ol>
  <li>As the basic building block of most programming languages, user-defined functions constitute "programming" as much as any single abstraction can. </li>
  <li>If you have written a function, you are a computer programmer.</li>
</ul>

========================================================
### Defining a function

* Let's define a function `fahr_to_kelvin()` that converts temperatures from Fahrenheit to Kelvin:

```{r}
fahr_to_kelvin <- function(temp) {
  kelvin <- ((temp - 32) * (5 / 9)) + 273.15
  return(kelvin)
}
```

* We define `fahr_to_kelvin()` by assigning it to the output of `function`. 

* The list of argument names are contained within parentheses.

* The body of the function (the statements that are executed when it runs) is contained within curly braces (`{}`). 

* The statements in the body are indented by two spaces. This makes the code easier to read but does not affect how the code operates.

========================================================
### What are functions? 

```{r eval=FALSE}
fahr_to_kelvin <- function(temp) {
  kelvin <- ((temp - 32) * (5 / 9)) + 273.15
  return(kelvin)
}
```

* It is useful to think of creating functions like writing a cookbook. 

* First you define the "ingredients" that your function needs. 

* In this case, we only need one ingredient to use our function: "temp". 

* After we list our ingredients, we then say what we will do with them, in this case, we are taking our ingredient and applying a set of mathematical operators to it. 

* When we call the function, the values we pass to it as arguments are assigned to those variables so that we can use them inside the function. 
* Inside the function, we use a return statement to send a result back to whoever asked for it.

========================================================
### Returns

* One feature unique to R is that the return statement is not required. 
	* R automatically returns whichever variable is on the last line of the body of the function. 
* But for clarity, it is often good practice to explicitly define the return statement.
* This can also be used for control flow within a function to break at an arbitrary line and not return the last line;
	* using an  `if()` statement, we can break out of the function and return a value based on a condition. 


========================================================
### Running functions

* Calling our own function is no different from calling any other function:

```{r}
# freezing point of water
fahr_to_kelvin(32)
```

```{r}
# boiling point of water
fahr_to_kelvin(212)
```

========================================================
## Combining functions

* The real power of functions comes from mixing, matching and combining them into ever-larger chunks to get the effect we want.

* Let's define two functions that will convert temperature from Fahrenheit to Kelvin, and Kelvin to Celsius:

```{r}
fahr_to_kelvin <- function(temp) {
  kelvin <- ((temp - 32) * (5 / 9)) + 273.15
  return(kelvin)
}

kelvin_to_celsius <- function(temp) {
  celsius <- temp - 273.15
  return(celsius)
}
```


* **Q:** how can we define a function to convert directly from Fahrenheit to Celsius by reusing these two functions above?

* **A:** consider the following code

```{r}
fahr_to_celsius <- function(temp) {
  temp_k <- fahr_to_kelvin(temp)
  result <- kelvin_to_celsius(temp_k)
  return(result)
}
```

========================================================
## Interlude: Defensive Programming

* Writing functions provides an efficient way to make R code re-usable and modular; 
  * we should note that it is important to ensure that functions only work in their intended use-cases. 
* Checking function parameters is related to the concept of _defensive programming_.
  * Defensive programming encourages us to frequently check conditions and throw an error if something is wrong. 
* These checks are referred to as assertion statements because we want to assert some condition is `TRUE` before proceeding.
  * They make it easier to debug because they give us a better idea of where the errors originate.

========================================================
### Checking conditions 

* Let's start by re-examining `fahr_to_kelvin()`, 

```{r}
fahr_to_kelvin <- function(temp) {
  kelvin <- ((temp - 32) * (5 / 9)) + 273.15
  return(kelvin)
}
```

* For this function to work as intended, the argument `temp` must be a `numeric` value; 
  * otherwise, the mathematical procedure for converting between the two temperature scales will not work. 
* To create an error, we can use the function `stop()`. 

========================================================
### Checking conditions with `if()`

* Since the argument `temp` must be a `numeric` vector, we could check for this condition with an `if` statement and throw an error if the condition was violated. We could augment our function above like so:


```{r}
fahr_to_kelvin <- function(temp) {
  if (!is.numeric(temp)) {
    stop("temp must be a numeric vector.")
  }
  kelvin <- ((temp - 32) * (5 / 9)) + 273.15
  return(kelvin)
}
```

* If we had multiple conditions or arguments to check, it would take many lines of code to check all of them. 
* Luckily R provides the convenience function `stopifnot()`. 
* We can list as many requirements that should evaluate to `TRUE`; 
  * `stopifnot()` throws an error if it finds one that is `FALSE`.
* Listing these conditions also serves a secondary purpose as extra documentation for the function.

========================================================
### Checking conditions with `stopifnot()`

* Let's try out defensive programming with `stopifnot()` by adding assertions to check the input to our function `fahr_to_kelvin()`.

* We want to assert the following: `temp` is a numeric vector. 

```{r}
fahr_to_kelvin <- function(temp) {
  stopifnot(is.numeric(temp))
  kelvin <- ((temp - 32) * (5 / 9)) + 273.15
  return(kelvin)
}
```

========================================================
### Checking conditions with `stopifnot()`

* Our function still works when given proper input.

```{r}
# freezing point of water
fahr_to_kelvin(temp = 32)
```

* But fails instantly if given improper input.

```{r error=TRUE}
# Metric is a factor instead of numeric
fahr_to_kelvin(temp = as.factor(32))
```

========================================================
## More on combining functions

* Now, we're going to define a function that calculates the Gross Domestic Product of a nation from the data available in our dataset:

```{r}
# Takes a dataset and multiplies the population column
# with the GDP per capita column.
calcGDP <- function(dat) {
  gdp <- dat$pop * dat$gdpPercap
  return(gdp)
}
```

* We define `calcGDP()` by assigning it to the output of `function`. 
* The list of argument names are contained within parentheses. 
* Next, the body of the function is contained within curly braces (`{}`).
* We've indented the statements in the body by two spaces. 
* This makes the code easier to read but does not affect how it operates.

========================================================
### More on combining functions


* When we call the function, the values we pass to it are assigned to the arguments, which become variables inside the body of the function.

```{r}
require(gapminder)
calcGDP(head(gapminder))
```

* That's not very informative. 
* Let's add some more arguments so we can extract that per year and country...

========================================================
### More on combining functions

```{r}
calcGDP <- function(dat, year=NULL, country=NULL) {
  if(!is.null(year)) {
    dat <- dat[dat$year %in% year, ]
  }
  if (!is.null(country)) {
    dat <- dat[dat$country %in% country,]
  }
  gdp <- dat$pop * dat$gdpPercap

  new <- cbind(dat, gdp=gdp)
  return(new)
}
```


* The function now subsets the provided data by year if the year argument isn't empty, then subsets the result by country if the country argument isn't empty. 
* Then it  calculates the GDP for whatever subset emerges from the previous two steps. 
* The  function then adds the GDP as a new column to the subsetted data and returns  this as the final result. 
* You can see that the output is much more informative than a vector of numbers.

========================================================
### More on combining functions

* Let's take a look at what happens when we specify the year:

```{r}
head(calcGDP(gapminder, year=2007))
```

* Or for a specific country:

```{r}
calcGDP(gapminder, country="Australia")
```

========================================================
### More on combining functions

* Or both:

```{r}
calcGDP(gapminder, year=2007, country="Australia")
```


========================================================
### Pass by value

* Functions in R almost always make copies of the data to operate on inside of a function body. 
* When we modify `dat` inside the function we are modifying the copy of the gapminder dataset stored in `dat`, not the original variable we gave as the first argument.

* This is called "pass-by-value" and it makes writing code much safer: 
  * you can always be sure that whatever changes you make within the body of the function, stay inside the body of the function.

========================================================
###  Function scope

* The idea of pass-by-value is related to the concept of scoping: 
  * any variables (or functions!) you create or modify inside the body of a function only exist for the lifetime of the function's execution. 
* When we call `calcGDP()`, the variables `dat`, `gdp` and `new` only exist inside the body of the function. 
* Even if we have variables of the same name in our interactive R session, they are not modified in any way when executing a function.

```{r, eval=FALSE}
  gdp <- dat$pop * dat$gdpPercap
  new <- cbind(dat, gdp=gdp)
  return(new)
}
```

* Finally, we calculated the GDP on our new subset, and created a new data frame with that column added. 

========================================================
### Testing and documenting code

<ul>
	<li> It's important to both test functions and document them:</li>
	<li> Documentation helps you, and others, understand:</li>
	<ol>
		<li>what the purpose of your function is;</li>
		<li>how to use it; and</li>
		<li>to make sure that your function actually does what you think.</li>
	</ol>
</ul>

========================================================
### Testing and documenting code

<ul>
	<li>When you first start out, your workflow will probably look a lot like this:</li>
	<ol>
		<li>Write a function</li>
		<li>Comment parts of the function to document its intended behaviour</li>
		<li>Load in the source file</li>
		<li>Experiment with it in the console to make sure it behaves as you expect</li>
		<li>Make any necessary bug fixes</li>
		<li>Repeat the process until you have documented, tested and benchmarked the code and not found any bugs.</li>
  </ol>
	<li>Formal documentation for functions, written in separate `.Rd` files, gets turned into the documentation you see in help files.</li>
	<li>The <a href="http://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html" target="blank">
	roxygen2</a> package allows R coders to write documentation alongside the function code and then process it into the appropriate `.Rd` files.</li>
	<li>You will want to switch to this more formal method of writing documentation when you start writing more complicated R projects.</li>
  <li>Formal automated tests can be written using the <a href="http://r-pkgs.had.co.nz/tests.html" target="blank">testthat</a>package.</li>
</ul>

========================================================
## Tips and future reading

* R has some unique aspects that can be exploited when performing more complicated operations. 
* We will not be writing anything that requires knowledge of these more advanced concepts. 
* In the future when you are comfortable writing functions in R, you can learn more by reading the <a href="http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Environment-objects">R Language Manual</a> or this <a href="http://adv-r.had.co.nz/Environments.html">chapter</a> from <a href="http://adv-r.had.co.nz/">Advanced R Programming</a> by Hadley Wickham.


