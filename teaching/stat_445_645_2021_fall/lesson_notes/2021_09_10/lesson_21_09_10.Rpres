<style>
.section .reveal .state-background {
   background: #ffffff;
}
.section .reveal h1,
.section .reveal h2,
.section .reveal p {
   color: black;
   margin-top: 50px;
   text-align: center;
}
</style>


Advanced Plotting in R
========================================================
autosize: true
incremental: true
width: 1920
height: 1080

<h2 style="text-align:left"> Instructions:</h2>
<p style='text-align:left'>Use the left and right arrow keys to navigate the presentation forward and backward respectively.  You can also use the arrows at the bottom right of the screen to navigate with a mouse.<br></p>

<blockquote>
FAIR USE ACT DISCLAIMER:</br>
This site is for educational purposes only.  This website may contain copyrighted material, the use of which has not been specifically authorized by the copyright holders. The material is made available on this website as a way to advance teaching, and copyright-protected materials are used to the extent necessary to make this class function in a distance learning environment.  The Fair Use Copyright Disclaimer is under section 107 of the Copyright Act of 1976, allowance is made for “fair use” for purposes such as criticism, comment, news reporting, teaching, scholarship, education and research.
</blockquote>


========================================================

<h2>Outline</h2>

<ul>
  <li>The following topics will be covered in this lecture:</li>
    <li> Advanced plotting</li>
    <ul>
      <li>`ggplot2` basics</li>
      <li>Graphics layers</li>
      <li>Transformations and statistics</li>
    </ul>
  </ul>
</ul>
  

========================================================
##  Advanced plotting


<ul>
  <li>There are three main plotting systems in R,</li>
  <ol>
    <li> the <a href="http://www.statmethods.net/graphs/index.html" target="blank">base plotting system</a> which we have seen already;</li> 
    <li> the <a href="http://www.statmethods.net/advgraphs/trellis.html" target="blank">lattice package</a>; </li>
    <li> and the <a href="http://www.statmethods.net/advgraphs/ggplot2.html" target="blank">ggplot2 package</a>.</li>
  </ol>
  <li>For the rest of the session, we'll learn about the ggplot2 package, because it is the common plotting library in R for <emph>creating publication quality graphics</emph>.</li>
  <li>ggplot2 is built on the idea that any plot can be expressed from the same set of components:</li> 
  <ol>
    <li>a <strong>data</strong> set, </li>
    <li> a <strong>coordinate system</strong>, and</li>
    <li> a set of <strong>geoms</strong> -- the visual representation of data points.</li>
  </ol>
  <li> The key to understanding ggplot2 is thinking about a figure in layers.</li>
  <li> This idea may be familiar to you if you have used image editing programs like Photoshop, Illustrator, or Inkscape.</li>
  <li>We will begin by loading the `gapminder` data again along with `ggplot2`:</li>
</ul>
```{r}
require(gapminder)
require(ggplot2)    
```


========================================================
### ggplot2 basics


* Let's start off with an example:

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```

* The first thing we do is call the `ggplot` function. 

* This function lets R know that we're creating a new plot, and any of the arguments we give the
`ggplot` function are the *global* options for the plot: 

  * i.e., they apply to all layers on the plot.

========================================================
### ggplot2 basics

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```

* We've passed in two arguments to `ggplot`. 

* First, we tell `ggplot` what data we want to show on our figure, in this example the gapminder data we read in earlier. 
* For the second argument,  we passed in the `aes` function, which tells `ggplot` how variables in the **data** map to *aesthetic* properties of the figure;

  * in this case the aesthetic properties are the **x** and **y** locations. 
  
* Here we told `ggplot` we want to plot the "gdpPercap" column on the x-axis and the "lifeExp" column on the y-axis. 


========================================================
### ggplot2 basics


```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```


* Notice that we didn't need to explicitly pass `aes` these columns (e.g. `x = gapminder[, "gdpPercap"]`); 

  * this is because `ggplot` will look in the dataframe for that column.


========================================================
### ggplot2 basics


* By itself, the call to `ggplot` isn't enough to draw a figure:

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
```

* We need to tell `ggplot` how we want to visually represent the data, which we do by adding a new **geom** layer. 

* In our example, we used `geom_point`, which tells `ggplot` we want to visually represent the relationship between **x** and **y** as a scatterplot of points.




========================================================

### Layers

* Using a scatterplot probably isn't the best for visualizing change over time.

* Instead, let's tell `ggplot` to visualize the data as a line plot:

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x=year, y=lifeExp, by=country, color=continent)) +
  geom_line()
```

* Instead of adding a `geom_point` layer, we've added a `geom_line` layer. 

* We've added the **by** *aesthetic*, which tells `ggplot` to draw a line for each country.

========================================================
### Layers


* <b>Q:</b> what do you think we can do to visualize both lines and points on the plot? 

* <b>A:</b> We can add another layer to the plot:

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x=year, y=lifeExp, by=country, color=continent)) +
  geom_line() + geom_point()
```



========================================================
### Layers


* It's important to note that each layer is drawn on top of the previous layer. 

* In this example, the points have been drawn *on top of* the lines. 

* Here's a demonstration:

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x=year, y=lifeExp, by=country)) +
  geom_line(mapping = aes(color=continent)) + geom_point()
```

* In this example, the *aesthetic* mapping of **color** has been moved from the global plot options in `ggplot` to the `geom_line` layer so it no longer applies to the points. 

  * Now we can clearly see that the points are drawn on top of the lines.

========================================================
### Layers

* So far, we've seen how to use an aesthetic (such as **color**) as a *mapping* to a variable in the data. 

* For example, when we use `geom_line(mapping = aes(color=continent))`, ggplot will give a different color to each continent. 

* But what if we want to change the color of all lines to blue? 

  * It may seem that `geom_line(mapping = aes(color="blue"))` should work, but it doesn't. 

* Since we don't want to create a mapping to a specific variable, we can move the color specification outside of the `aes()` function, like this: `geom_line(color="blue")`.

========================================================
### Layers

* The result of changing the code as in the last slide is

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x=year, y=lifeExp, by=country)) +
  geom_line(mapping = aes(color=continent)) + geom_line(color="blue")
```


========================================================
### Transformations and statistics in ggplot2

* `ggplot2` also makes it easy to overlay statistical models over the data -- to demonstrate we'll go back to our first example:
```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```

* Currently it's hard to see the relationship between the points due to some strong outliers in GDP per capita. 


========================================================
### Transformations and statistics in ggplot2

* We can change the scale of units on the x axis using the *scale* functions. 

* These control the mapping between the data values and visual values of an aesthetic. 

* We can also modify the transparency of the points, using the *alpha* function, which is especially helpful when you have a large amount of data which is very clustered.

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point(alpha = 0.5) + scale_x_log10()
```

========================================================
### Transformations and statistics in ggplot2


```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point(alpha = 0.5) + scale_x_log10()
```


* The `log10` function applied a transformation to the values of the gdpPercap column before rendering them on the plot, so that each multiple of 10 now only corresponds to an increase in 1 on the transformed scale, 

  * e.g. a GDP per capita of 1,000 is now 3 on the x axis, a value of 10,000 corresponds to 4 on the x axis and so on. 
  
* This makes it easier to visualize the spread of data on the x-axis.


========================================================
### Fitting a simple regression

* We can fit a simple relationship to the data by adding another layer,
`geom_smooth`:

```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point() + scale_x_log10() + geom_smooth(method="lm")
```

* The ``lm`` method refers to the fact we are using the standard "linear model" regression function built-in to R.

* The regression line is meant to describe the trend between an increase in income (in a log-10 scale) and the associated increase in life expectancy.

========================================================
### Fitting a simple regression

* As a quick preview for the midterm, the `lm` function can be used directly as follows:

```{r}
my_linear_model_object <- lm(lifeExp ~ log10(gdpPercap), data=gapminder)
```

* Notice in the above expression, we utilize a special `~` operator to instruct the function that we are inserting a proxy for a mathematical equation.

* This is meant to represent the formula

$$\begin{align}
Y_\mathrm{\text{Life expectancy}} = \beta_0 + \beta_1 \log_{10}\left( X_\mathrm{\text{GDP per capita}}\right) + \epsilon
\end{align}$$


* The linear model is an object that has certain built-in methods that are standard in regression analysis.

  * Specifically, it automatically performs or knows how to perform much of the mathematical analysis we should run on the above equation.

========================================================
### Fitting a simple regression

* To learn a bit about the model and the statistical relationship we are studying, we can use the summary command:

```{r}
summary(my_linear_model_object)
```

* Notice our formula is represented with a keyword argument in the above summary.

  * Various pieces of analysis used for the midterm can be derived from the above information.
  
  * For example, we can see the p-value for the predictor `log10(gdpPercap)` and the $R^2$ value above.

========================================================
### Setting additional plotting parameters


* Back in the plot, we can make the line thicker by *setting* the **size** aesthetic in the `geom_smooth` layer:
```{r fig.width=24, fig.height=6}
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point() + scale_x_log10() + geom_smooth(method="lm", size=1.5)
```

* There are two ways an *aesthetic* can be specified. Here we *set* the **size** aesthetic by passing it as an argument to `geom_smooth`. 

* Previously in the lesson we've used the `aes` function to define a *mapping* between data
variables and their visual representation.



========================================================
### Multi-panel figures

* Earlier we visualized the change in life expectancy over time across all countries in one plot but we can split this out over multiple panels by adding a layer of **facet** panels.

* We start by making a subset of data including only countries located in the Americas.  

* This includes 25 countries, which will begin to clutter the figure.  

```{r fig.width=24, fig.height=6}
americas <- gapminder[gapminder$continent == "Americas",]
ggplot(data = americas, mapping = aes(x = year, y = lifeExp)) +
  geom_line() + facet_wrap( ~ country) 
```

* The `facet_wrap` layer also takes a "formula" as its argument, denoted by the tilde (~),  telling R to draw a panel for each unique value in the country column of the gapminder dataset.

